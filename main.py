import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from openai import AsyncOpenAI
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –µ–º–æ–¥–∑—ñ
platform_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üì∏ Instagram", callback_data="platform_instagram"),
        InlineKeyboardButton(text="üìò Facebook", callback_data="platform_facebook"),
        InlineKeyboardButton(text="üõí Allegro", callback_data="platform_allegro")
    ]
])

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_data = {}

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer(
        "üëã –í—ñ—Ç–∞—é! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∫–ª–∞–º–Ω–∏–π –æ–ø–∏—Å –ø–æ–ª—å—Å—å–∫–æ—é –º–æ–≤–æ—é –¥–ª—è —Ç–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É.\n\n"
        "üìù –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É –∞–±–æ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Ç–æ–≤–∞—Ä—É, –∞ —è –∑–≥–µ–Ω–µ—Ä—É—é –≥–æ—Ç–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è Instagram, Facebook —á–∏ Allegro!"
    )

@dp.message(F.text)
async def handle_text(message: Message):
    user_data[message.from_user.id] = {"product": message.text}
    await message.answer("üîπ –û–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –¥–ª—è —è–∫–æ—ó —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–ø–∏—Å:", reply_markup=platform_keyboard)

@dp.callback_query(F.data.startswith("platform_"))
async def handle_platform(callback_query: types.CallbackQuery):
    await bot.send_chat_action(callback_query.from_user.id, action="typing")
    platform = callback_query.data.split("_")[1]
    user_id = callback_query.from_user.id
    product_name = user_data.get(user_id, {}).get("product")

    if not product_name:
        await callback_query.message.answer("‚ùóÔ∏è –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É.")
        return

    prompt = f"–°—Ç–≤–æ—Ä–∏ –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–π —Ä–µ–∫–ª–∞–º–Ω–∏–π –æ–ø–∏—Å –¥–ª—è —Ç–æ–≤–∞—Ä—É '{product_name}' –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É {platform.capitalize()} –ø–æ–ª—å—Å—å–∫–æ—é –º–æ–≤–æ—é. –î–æ–¥–∞–π –µ–º–æ–¥–∑—ñ, –∑–∞–∫–ª–∏–∫ –¥–æ –¥—ñ—ó —ñ —Å—Ç–∏–ª—å, –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –¥–æ —Ü—ñ—î—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏."

    try:
        logger.info("üì§ –ù–∞–¥—Å–∏–ª–∞—é –∑–∞–ø–∏—Ç –¥–æ OpenAI...")
        response = await openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, —è–∫–∏–π –ø–∏—à–µ —Ä–µ–∫–ª–∞–º–Ω—ñ —Ç–µ–∫—Å—Ç–∏ –ø–æ–ª—å—Å—å–∫–æ—é."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7
        )
        description = response.choices[0].message.content
        logger.info("üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–æ")
        await callback_query.message.answer(
            f"‚úÖ <b>–û–ø–∏—Å –¥–ª—è {platform.capitalize()}:</b>\n\n{description}"
        )
    except Exception as e:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Å—É", exc_info=True)
        await callback_query.message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")

# –ó–∞–ø—É—Å–∫
async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error("‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É", exc_info=True)
